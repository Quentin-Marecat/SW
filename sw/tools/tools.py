import numpy as np
from sw.tools.circuits import CU_trotterized
from qiskit import transpile

def fidelity(psi, phi):
    return np.absolute(np.dot(np.conjugate(psi), phi))**2

def compute_statevector(theta,initial_circuit,SW_PauliSum,backend):
  '''
  This function returns the energy.
  Careful about the endian-ordering
  '''

  if isinstance(theta,(float,int)):
    SW_PauliSum_theta = SW_PauliSum.mul(theta[0])
    total_circuit = initial_circuit.compose(CU_trotterized(SW_PauliSum_theta))
  else:
    total_circuit = initial_circuit
  # Reverse the circuit which is sorted with a different endian.
  total_circuit = total_circuit.reverse_bits()
  total_circuit.save_statevector()
  # Transpile for simulator
  total_circuit = transpile(total_circuit, backend)
  result = backend.run(total_circuit).result()
  return result.get_statevector(total_circuit).conj()


def optimized_features_RVB_inspired_ansatz_Heisenberg_model(Lx,Ly):
    num_RVB_layers_chains = [0, 1, 1, 2, 2, 3]

    optimal_RVB_params_chains = []
    optimal_RVB_params_chains.append([])
    optimal_RVB_params_chains.append([0.60699248, 0.79302296, 0.93309761])
    optimal_RVB_params_chains.append([0.64239885, 0.64239826, 1.73565397, 0, 1.73564463])
    optimal_RVB_params_chains.append([0.500014, 0.72942583, 0.50093111, 2.32056166, 0.89876661, 0.88902216, 2.31317403, 1.10276422, 0.20034985, 1.09920186, 1.37513596, 0.23925769, 0.23254382, 1.36768295])
    optimal_RVB_params_chains.append([0.87814015, 0.61214676, 0.61304108, 0.87491838, 2.55149131, 1.37703389, 0.74961714, 1.37778137, 2.54855621, 1.48252805, 0.53028963, 0.53034426, 1.47933906, 1.30089337, 0.93154862, 0, 0.92907184, 1.30157821])
    optimal_RVB_params_chains.append([1.21121358e-01, 5.53249564e-01, 6.26010911e-01, 2.25120565e+00, 2.76420047e-03, 7.31180096e-03, 2.64062701e+00, 4.85444014e-01, 2.46163160e+00, 2.98221597e+00, 1.50290725e-01, 6.21174981e-01, 1.22389093e+00, 8.37239887e-01, 2.92526281e+00, 5.48604775e-01, 2.13565624e+00, 1.36193192e+00, 5.39647443e-01, 2.06768905e+00, 1.10244197e+00, 2.36780894e+00, 1.17069605e+00, 3.74990730e-01, 8.44319500e-01, 2.47566014e-01, 1.19863837e+00, 1.40814582e+00, 5.15528001e-01, 0.00000000e+00, 6.09794325e-01, 3.24352067e-01, 1.48306899e+00])

    num_RVB_layers_ladders = [0, 1, 2, 3, 4, 5]

    optimal_RVB_params_ladders = []
    optimal_RVB_params_ladders.append([])
    optimal_RVB_params_ladders.append([1.23095941, 0.51518075, 4.53704485])
    optimal_RVB_params_ladders.append([4.89475145, 4.89390123, 6.22038404, 2.76508436, 5.30906227, 0.18978141, 0.32498453, 1.28482658, 0.5315717, 2.10385809])
    optimal_RVB_params_ladders.append([1.266958700175022, 4.509976150675118, 1.2575825665147764, 3.325192273123834, 2.8188499559946325, 3.8626203307598885, 1.663125010398008, 0.3702384956911498, 0.0, 0.9410288169770145, 0.170046967850574, 0.4329247230887762, 0.29564871162366513, 2.970633811468112, 0.0013137574330738591, 3.141741877312851, 0.9927238014023098, 1.5829190966326376, 2.0855342890995277e-05, 0.0, 0.33746858662293])
    optimal_RVB_params_ladders.append([0.999646033136693, 2.956409488372858, 1.6625004756509087, 2.4933023540721138, 5.317555278885754, 4.013875668490456, 3.1040591457482454, 0.4931085637708256, 5.826627671674332, 5.931158604273501, 3.0521347968777324, 0.0, 4.595272771789412, 2.18681722832493, 4.444462220967672, 1.5597888387351457, 2.0782504249674294, 5.920016781322101, 5.051458276480076, 0.15190974103674612, 3.1195855048220174, 4.7986726352136255, 6.0422202960730536, 0.9721154743224645, 3.162499504799161, 0.12917217921693278, 5.375535690787843, 1.6083557241267374, 0.0, 0.5173436251310715, 0.8225300668932279, 1.9133304859269915, 1.1662800142917404, 0.0, 0.0, 0.0])
    optimal_RVB_params_ladders.append([4.170317529699606, 0.5193582102425823, 3.5835135162635217, 1.8932309868765467, 6.08412713141594, 1.8867265784124518, 4.042891033875173, 3.378693409719611, 6.283185307179586, 2.6092477073909888, 0.17653430402657175, 3.187245898047903, 4.742790853951703, 0.16066731330083167, 0.3859876710475828, 3.3220452995487695, 1.8368446508244407, 3.9198580884671386, 3.0884400074811236, 3.1528323817954926, 1.3303645704756684, 4.412908117554113, 0.958372910167335, 1.7813238891686616, 3.2895533006930906, 3.1397081249177643, 2.0590374252385257, 2.956652546342404, 3.3903016493095604, 3.1695543272696085, 3.2036869157964505, 6.275211937647304, 1.0744532873864099, 2.9935945643248902, 5.518585234650712, 1.4440150786007746, 2.957010421034811, 2.0060413256551053, 0.0, 0.0, 0.0, 0.0, 0.20390898561006443, 2.5629195300308028, 0.1494021542646028, 0.9836233318378192, 1.703973696497872, 0.12262419032687395, 1.4097536159544113, 3.411945401029684, 0.9760424355055554, 0.5439086732993378, 1.7967819962040341, 0.0, 0.4390057139588354])
    
    if Ly == 1:
        num_of_layers = num_RVB_layers_chains[Lx//2-1]
        all_optimal_RVB_params = optimal_RVB_params_chains[Lx//2-1]
    else:
        num_of_layers = num_RVB_layers_ladders[Lx-1]
        all_optimal_RVB_params = optimal_RVB_params_ladders[Lx-1]
        
    return num_of_layers, all_optimal_RVB_params